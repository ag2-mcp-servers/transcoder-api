# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:03:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AdBreak(BaseModel):
    startTimeOffset: Optional[str] = Field(
        None,
        description='Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.',
    )


class AnimationEnd(BaseModel):
    startTimeOffset: Optional[str] = Field(
        None, description='The time to end overlay object, in seconds. Default: 0'
    )


class FadeType(Enum):
    FADE_TYPE_UNSPECIFIED = 'FADE_TYPE_UNSPECIFIED'
    FADE_IN = 'FADE_IN'
    FADE_OUT = 'FADE_OUT'


class Audio(BaseModel):
    highBoost: Optional[bool] = Field(
        None,
        description='Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.',
    )
    lowBoost: Optional[bool] = Field(
        None,
        description='Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.',
    )
    lufs: Optional[float] = Field(
        None,
        description='Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization',
    )


class AudioMapping(BaseModel):
    atomKey: Optional[str] = Field(
        None,
        description='Required. The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.',
    )
    gainDb: Optional[float] = Field(
        None,
        description='Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.',
    )
    inputChannel: Optional[int] = Field(
        None,
        description='Required. The zero-based index of the channel in the input audio stream.',
    )
    inputKey: Optional[str] = Field(
        None, description='Required. The `Input.key` that identifies the input file.'
    )
    inputTrack: Optional[int] = Field(
        None,
        description='Required. The zero-based index of the track in the input file.',
    )
    outputChannel: Optional[int] = Field(
        None,
        description='Required. The zero-based index of the channel in the output audio stream.',
    )


class AudioStream(BaseModel):
    bitrateBps: Optional[int] = Field(
        None,
        description='Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.',
    )
    channelCount: Optional[int] = Field(
        None,
        description='Number of audio channels. Must be between 1 and 6. The default is 2.',
    )
    channelLayout: Optional[List[str]] = Field(
        None,
        description='A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency',
    )
    codec: Optional[str] = Field(
        None,
        description='The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`',
    )
    displayName: Optional[str] = Field(
        None,
        description='The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.',
    )
    mapping: Optional[List[AudioMapping]] = Field(
        None,
        description='The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.',
    )
    sampleRateHertz: Optional[int] = Field(
        None, description='The audio sample rate in Hertz. The default is 48000 Hertz.'
    )


class BwdifConfig(BaseModel):
    deinterlaceAllFrames: Optional[bool] = Field(
        None,
        description='Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.',
    )
    mode: Optional[str] = Field(
        None,
        description='Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field',
    )
    parity: Optional[str] = Field(
        None,
        description='The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity',
    )


class Color(BaseModel):
    brightness: Optional[float] = Field(
        None,
        description='Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.',
    )
    contrast: Optional[float] = Field(
        None,
        description='Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.',
    )
    saturation: Optional[float] = Field(
        None,
        description='Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.',
    )


class Crop(BaseModel):
    bottomPixels: Optional[int] = Field(
        None,
        description='The number of pixels to crop from the bottom. The default is 0.',
    )
    leftPixels: Optional[int] = Field(
        None,
        description='The number of pixels to crop from the left. The default is 0.',
    )
    rightPixels: Optional[int] = Field(
        None,
        description='The number of pixels to crop from the right. The default is 0.',
    )
    topPixels: Optional[int] = Field(
        None, description='The number of pixels to crop from the top. The default is 0.'
    )


class Deblock(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Enable deblocker. The default is `false`.'
    )
    strength: Optional[float] = Field(
        None,
        description='Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.',
    )


class Denoise(BaseModel):
    strength: Optional[float] = Field(
        None,
        description='Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.',
    )
    tune: Optional[str] = Field(
        None,
        description='Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`',
    )


class EditAtom(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.',
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.',
    )
    key: Optional[str] = Field(
        None,
        description='A unique key for this atom. Must be specified when using advanced mapping.',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.',
    )


class Empty(BaseModel):
    pass


class H264CodecSettings(BaseModel):
    allowOpenGop: Optional[bool] = Field(
        None,
        description='Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.',
    )
    aqStrength: Optional[float] = Field(
        None,
        description='Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.',
    )
    bFrameCount: Optional[int] = Field(
        None,
        description='The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.',
    )
    bPyramid: Optional[bool] = Field(
        None,
        description='Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.',
    )
    bitrateBps: Optional[int] = Field(
        None,
        description='Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.',
    )
    crfLevel: Optional[int] = Field(
        None,
        description='Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.',
    )
    enableTwoPass: Optional[bool] = Field(
        None,
        description='Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.',
    )
    entropyCoder: Optional[str] = Field(
        None,
        description='The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`',
    )
    frameRate: Optional[float] = Field(
        None,
        description='Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.',
    )
    gopDuration: Optional[str] = Field(
        None,
        description='Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.',
    )
    gopFrameCount: Optional[int] = Field(
        None,
        description='Select the GOP size based on the specified frame count. Must be greater than zero.',
    )
    heightPixels: Optional[int] = Field(
        None,
        description='The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )
    pixelFormat: Optional[str] = Field(
        None,
        description='Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format',
    )
    preset: Optional[str] = Field(
        None,
        description='Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.',
    )
    profile: Optional[str] = Field(
        None,
        description='Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.',
    )
    rateControlMode: Optional[str] = Field(
        None,
        description='Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor',
    )
    tune: Optional[str] = Field(
        None,
        description='Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.',
    )
    vbvFullnessBits: Optional[int] = Field(
        None,
        description='Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.',
    )
    vbvSizeBits: Optional[int] = Field(
        None,
        description='Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.',
    )
    widthPixels: Optional[int] = Field(
        None,
        description='The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )


class H265CodecSettings(BaseModel):
    allowOpenGop: Optional[bool] = Field(
        None,
        description='Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.',
    )
    aqStrength: Optional[float] = Field(
        None,
        description='Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.',
    )
    bFrameCount: Optional[int] = Field(
        None,
        description='The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.',
    )
    bPyramid: Optional[bool] = Field(
        None,
        description='Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.',
    )
    bitrateBps: Optional[int] = Field(
        None,
        description='Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.',
    )
    crfLevel: Optional[int] = Field(
        None,
        description='Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.',
    )
    enableTwoPass: Optional[bool] = Field(
        None,
        description='Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.',
    )
    frameRate: Optional[float] = Field(
        None,
        description='Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.',
    )
    gopDuration: Optional[str] = Field(
        None,
        description='Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.',
    )
    gopFrameCount: Optional[int] = Field(
        None,
        description='Select the GOP size based on the specified frame count. Must be greater than zero.',
    )
    heightPixels: Optional[int] = Field(
        None,
        description='The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )
    pixelFormat: Optional[str] = Field(
        None,
        description='Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format',
    )
    preset: Optional[str] = Field(
        None,
        description='Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.',
    )
    profile: Optional[str] = Field(
        None,
        description='Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.',
    )
    rateControlMode: Optional[str] = Field(
        None,
        description='Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor',
    )
    tune: Optional[str] = Field(
        None,
        description='Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.',
    )
    vbvFullnessBits: Optional[int] = Field(
        None,
        description='Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.',
    )
    vbvSizeBits: Optional[int] = Field(
        None,
        description='Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.',
    )
    widthPixels: Optional[int] = Field(
        None,
        description='The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )


class Mode(Enum):
    PROCESSING_MODE_UNSPECIFIED = 'PROCESSING_MODE_UNSPECIFIED'
    PROCESSING_MODE_INTERACTIVE = 'PROCESSING_MODE_INTERACTIVE'
    PROCESSING_MODE_BATCH = 'PROCESSING_MODE_BATCH'


class State(Enum):
    PROCESSING_STATE_UNSPECIFIED = 'PROCESSING_STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class Type(Enum):
    MANIFEST_TYPE_UNSPECIFIED = 'MANIFEST_TYPE_UNSPECIFIED'
    HLS = 'HLS'
    DASH = 'DASH'


class Manifest(BaseModel):
    fileName: Optional[str] = Field(
        None,
        description='The name of the generated file. The default is `manifest` with the extension suffix corresponding to the `Manifest.type`.',
    )
    muxStreams: Optional[List[str]] = Field(
        None,
        description='Required. List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.',
    )
    type: Optional[Type] = Field(
        None, description='Required. Type of the manifest, can be `HLS` or `DASH`.'
    )


class NormalizedCoordinate(BaseModel):
    x: Optional[float] = Field(None, description='Normalized x coordinate.')
    y: Optional[float] = Field(None, description='Normalized y coordinate.')


class Output(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from `Job.output_uri`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).',
    )


class Pad(BaseModel):
    bottomPixels: Optional[int] = Field(
        None, description='The number of pixels to add to the bottom. The default is 0.'
    )
    leftPixels: Optional[int] = Field(
        None, description='The number of pixels to add to the left. The default is 0.'
    )
    rightPixels: Optional[int] = Field(
        None, description='The number of pixels to add to the right. The default is 0.'
    )
    topPixels: Optional[int] = Field(
        None, description='The number of pixels to add to the top. The default is 0.'
    )


class PubsubDestination(BaseModel):
    topic: Optional[str] = Field(
        None,
        description='The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.',
    )


class SegmentSettings(BaseModel):
    individualSegments: Optional[bool] = Field(
        None,
        description='Required. Create an individual segment file. The default is `false`.',
    )
    segmentDuration: Optional[str] = Field(
        None,
        description='Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).',
    )


class SpriteSheet(BaseModel):
    columnCount: Optional[int] = Field(
        None,
        description='The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.',
    )
    endTimeOffset: Optional[str] = Field(
        None,
        description='End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.',
    )
    filePrefix: Optional[str] = Field(
        None,
        description='Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.',
    )
    format: Optional[str] = Field(
        None,
        description='Format type. The default is `jpeg`. Supported formats: - `jpeg`',
    )
    interval: Optional[str] = Field(
        None,
        description='Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.',
    )
    quality: Optional[int] = Field(
        None,
        description='The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.',
    )
    rowCount: Optional[int] = Field(
        None,
        description='The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.',
    )
    spriteHeightPixels: Optional[int] = Field(
        None,
        description='Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )
    spriteWidthPixels: Optional[int] = Field(
        None,
        description='Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.',
    )
    totalCount: Optional[int] = Field(
        None,
        description='Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TextMapping(BaseModel):
    atomKey: Optional[str] = Field(
        None,
        description='Required. The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.',
    )
    inputKey: Optional[str] = Field(
        None, description='Required. The `Input.key` that identifies the input file.'
    )
    inputTrack: Optional[int] = Field(
        None,
        description='Required. The zero-based index of the track in the input file.',
    )


class TextStream(BaseModel):
    codec: Optional[str] = Field(
        None,
        description='The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`',
    )
    displayName: Optional[str] = Field(
        None,
        description='The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.',
    )
    mapping: Optional[List[TextMapping]] = Field(
        None,
        description='The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.',
    )


class Vp9CodecSettings(BaseModel):
    bitrateBps: Optional[int] = Field(
        None,
        description='Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.',
    )
    crfLevel: Optional[int] = Field(
        None,
        description='Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.',
    )
    frameRate: Optional[float] = Field(
        None,
        description='Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.',
    )
    gopDuration: Optional[str] = Field(
        None,
        description='Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.',
    )
    gopFrameCount: Optional[int] = Field(
        None,
        description='Select the GOP size based on the specified frame count. Must be greater than zero.',
    )
    heightPixels: Optional[int] = Field(
        None,
        description='The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )
    pixelFormat: Optional[str] = Field(
        None,
        description='Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format',
    )
    profile: Optional[str] = Field(
        None,
        description='Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.',
    )
    rateControlMode: Optional[str] = Field(
        None,
        description='Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate',
    )
    widthPixels: Optional[int] = Field(
        None,
        description='The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.',
    )


class YadifConfig(BaseModel):
    deinterlaceAllFrames: Optional[bool] = Field(
        None,
        description='Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.',
    )
    disableSpatialInterlacing: Optional[bool] = Field(
        None, description='Disable spacial interlacing. The default is `false`.'
    )
    mode: Optional[str] = Field(
        None,
        description='Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field',
    )
    parity: Optional[str] = Field(
        None,
        description='The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AnimationFade(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s',
    )
    fadeType: Optional[FadeType] = Field(
        None, description='Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.'
    )
    startTimeOffset: Optional[str] = Field(
        None, description='The time to start the fade animation, in seconds. Default: 0'
    )
    xy: Optional[NormalizedCoordinate] = Field(
        None,
        description='Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.',
    )


class AnimationStatic(BaseModel):
    startTimeOffset: Optional[str] = Field(
        None,
        description='The time to start displaying the overlay object, in seconds. Default: 0',
    )
    xy: Optional[NormalizedCoordinate] = Field(
        None,
        description='Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.',
    )


class Deinterlace(BaseModel):
    bwdif: Optional[BwdifConfig] = Field(
        None, description='Specifies the Bob Weaver Deinterlacing Filter Configuration.'
    )
    yadif: Optional[YadifConfig] = Field(
        None,
        description='Specifies the Yet Another Deinterlacing Filter Configuration.',
    )


class Image(BaseModel):
    alpha: Optional[float] = Field(
        None,
        description='Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.',
    )
    resolution: Optional[NormalizedCoordinate] = Field(
        None,
        description='Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.',
    )
    uri: Optional[str] = Field(
        None,
        description='Required. URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.',
    )


class MuxStream(BaseModel):
    container: Optional[str] = Field(
        None,
        description='The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)',
    )
    elementaryStreams: Optional[List[str]] = Field(
        None, description='List of `ElementaryStream.key`s multiplexed in this stream.'
    )
    fileName: Optional[str] = Field(
        None,
        description='The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.',
    )
    key: Optional[str] = Field(
        None,
        description='A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `.m3u8` extension suffix.',
    )
    segmentSettings: Optional[SegmentSettings] = Field(
        None, description='Segment settings for `ts`, `fmp4` and `vtt`.'
    )


class PreprocessingConfig(BaseModel):
    audio: Optional[Audio] = Field(
        None, description='Audio preprocessing configuration.'
    )
    color: Optional[Color] = Field(
        None, description='Color preprocessing configuration.'
    )
    crop: Optional[Crop] = Field(
        None, description='Specify the video cropping configuration.'
    )
    deblock: Optional[Deblock] = Field(
        None, description='Deblock preprocessing configuration.'
    )
    deinterlace: Optional[Deinterlace] = Field(
        None, description='Specify the video deinterlace configuration.'
    )
    denoise: Optional[Denoise] = Field(
        None, description='Denoise preprocessing configuration.'
    )
    pad: Optional[Pad] = Field(
        None, description='Specify the video pad filter configuration.'
    )


class VideoStream(BaseModel):
    h264: Optional[H264CodecSettings] = Field(None, description='H264 codec settings.')
    h265: Optional[H265CodecSettings] = Field(None, description='H265 codec settings.')
    vp9: Optional[Vp9CodecSettings] = Field(None, description='VP9 codec settings.')


class Animation(BaseModel):
    animationEnd: Optional[AnimationEnd] = Field(
        None, description='End previous animation.'
    )
    animationFade: Optional[AnimationFade] = Field(
        None, description='Display overlay object with fade animation.'
    )
    animationStatic: Optional[AnimationStatic] = Field(
        None, description='Display static overlay object.'
    )


class ElementaryStream(BaseModel):
    audioStream: Optional[AudioStream] = Field(
        None, description='Encoding of an audio stream.'
    )
    key: Optional[str] = Field(
        None, description='A unique key for this elementary stream.'
    )
    textStream: Optional[TextStream] = Field(
        None,
        description='Encoding of a text stream. For example, closed captions or subtitles.',
    )
    videoStream: Optional[VideoStream] = Field(
        None, description='Encoding of a video stream.'
    )


class Input(BaseModel):
    key: Optional[str] = Field(
        None,
        description='A unique key for this input. Must be specified when using advanced mapping and edit lists.',
    )
    preprocessingConfig: Optional[PreprocessingConfig] = Field(
        None, description='Preprocessing configurations.'
    )
    uri: Optional[str] = Field(
        None,
        description='URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from `Job.input_uri`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).',
    )


class Overlay(BaseModel):
    animations: Optional[List[Animation]] = Field(
        None,
        description='List of Animations. The list should be chronological, without any time overlap.',
    )
    image: Optional[Image] = Field(None, description='Image overlay.')


class JobConfig(BaseModel):
    adBreaks: Optional[List[AdBreak]] = Field(
        None,
        description='List of ad breaks. Specifies where to insert ad break tags in the output manifests.',
    )
    editList: Optional[List[EditAtom]] = Field(
        None,
        description='List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.',
    )
    elementaryStreams: Optional[List[ElementaryStream]] = Field(
        None, description='List of elementary streams.'
    )
    inputs: Optional[List[Input]] = Field(
        None, description='List of input assets stored in Cloud Storage.'
    )
    manifests: Optional[List[Manifest]] = Field(
        None, description='List of output manifests.'
    )
    muxStreams: Optional[List[MuxStream]] = Field(
        None, description='List of multiplexing settings for output streams.'
    )
    output: Optional[Output] = Field(None, description='Output configuration.')
    overlays: Optional[List[Overlay]] = Field(
        None, description='List of overlays on the output video, in descending Z-order.'
    )
    pubsubDestination: Optional[PubsubDestination] = Field(
        None, description='Destination on Pub/Sub.'
    )
    spriteSheets: Optional[List[SpriteSheet]] = Field(
        None,
        description='List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.',
    )


class JobTemplate(BaseModel):
    config: Optional[JobConfig] = Field(
        None, description='The configuration for this template.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='The labels associated with this job template. You can use these to organize and group your job templates.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the job template. Format: `projects/{project_number}/locations/{location}/jobTemplates/{job_template}`',
    )


class ListJobTemplatesResponse(BaseModel):
    jobTemplates: Optional[List[JobTemplate]] = Field(
        None, description='List of job templates in the specified region.'
    )
    nextPageToken: Optional[str] = Field(None, description='The pagination token.')
    unreachable: Optional[List[str]] = Field(
        None, description='List of regions that could not be reached.'
    )


class Job(BaseModel):
    config: Optional[JobConfig] = Field(
        None, description='The configuration for this job.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the job was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the transcoding finished.'
    )
    error: Optional[Status] = Field(
        None,
        description='Output only. An error object that describes the reason for the failure. This property is always present when `state` is `FAILED`.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='The labels associated with this job. You can use these to organize and group your jobs.',
    )
    mode: Optional[Mode] = Field(
        None,
        description='The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`',
    )
    outputUri: Optional[str] = Field(
        None,
        description='Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).',
    )
    startTime: Optional[str] = Field(
        None, description='Output only. The time the transcoding started.'
    )
    state: Optional[State] = Field(
        None, description='Output only. The current state of the job.'
    )
    templateId: Optional[str] = Field(
        None,
        description='Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`',
    )
    ttlAfterCompletionDays: Optional[int] = Field(
        None,
        description='Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.',
    )


class ListJobsResponse(BaseModel):
    jobs: Optional[List[Job]] = Field(
        None, description='List of jobs in the specified region.'
    )
    nextPageToken: Optional[str] = Field(None, description='The pagination token.')
    unreachable: Optional[List[str]] = Field(
        None, description='List of regions that could not be reached.'
    )
